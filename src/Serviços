import java.util.ArrayList;
import java.util.Date;
import java.text.SimpleDateFormat;

class Medico {
    private String nome;
    private String especialidade;
    private ArrayList<Date> horariosDisponiveis; // Lista de horários disponíveis

    public Medico(String nome, String especialidade) {
        this.nome = nome;
        this.especialidade = especialidade;
        this.horariosDisponiveis = new ArrayList<>();
    }

    public void adicionarHorarioDisponivel(Date horario) {
        horariosDisponiveis.add(horario);
    }

    public boolean estaDisponivel(Date horario) {
        return horariosDisponiveis.contains(horario);
    }

    public String getEspecialidade() {
        return especialidade;
    }

    public String getNome() {
        return nome;
    }
}

class Consulta {
    private Date data;
    private double valor;
    private boolean paga;
    private Medico medico;

    public Consulta(Date data, double valor, Medico medico) {
        this.data = data;
        this.valor = valor;
        this.paga = false; // Inicialmente, a consulta não está paga
        this.medico = medico;
    }

    public void marcarComoPaga() {
        this.paga = true;
    }

    public boolean isPaga() {
        return paga;
    }

    public Date getData() {
        return data;
    }

    public double getValor() {
        return valor;
    }

    public Medico getMedico() {
        return medico;
    }

    public String toString() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        String status = paga ? "Paga" : "Não paga";
        return "Consulta com Dr(a). " + medico.getNome() + " em " + sdf.format(data) + " - Valor: R$" + String.format("%.2f", valor) + " - Status: " + status;
    }
}

class Usuario {
    private String nome;
    private ArrayList<Double> pagamentos; // Lista para armazenar os pagamentos
    private ArrayList<Consulta> consultas; // Lista para armazenar as consultas marcadas

    public Usuario(String nome) {
        this.nome = nome;
        this.pagamentos = new ArrayList<>();
        this.consultas = new ArrayList<>();
    }

    public void registrarPagamento(double valor) {
        pagamentos.add(valor);
        System.out.println("Pagamento de R$" + String.format("%.2f", valor) + " registrado para " + nome + ".");
    }

    public void marcarConsulta(Date data, double valor, Medico medico) {
        if (podeMarcarConsulta(data) && medico.estaDisponivel(data) && medico.getEspecialidade().equalsIgnoreCase("Cardiologia")) { // Exemplo de especialidade
            Consulta novaConsulta = new Consulta(data, valor, medico);
            consultas.add(novaConsulta);
            System.out.println("Consulta marcada com sucesso para " + nome + " com Dr(a). " + medico.getNome() + " em " + new SimpleDateFormat("dd/MM/yyyy HH:mm").format(data) + ".");
        } else {
            System.out.println(nome + ", você não pode marcar esta consulta. Verifique a disponibilidade do médico, se já tem outra consulta no mesmo dia ou se a especialidade está correta.");
        }
    }

    private boolean podeMarcarConsulta(Date data) {
        // Verifica se o usuário já tem outra consulta no mesmo dia
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        for (Consulta consulta : consultas) {
            if (sdf.format(consulta.getData()).equals(sdf.format(data))) {
                return false; // Já tem consulta no mesmo dia
            }
        }
        return true; // Pode marcar a consulta
    }

    public boolean podeAgendarNovaConsulta() {
        // Verifica se o usuário pagou todas as consultas anteriores
        for (Consulta consulta : consultas) {
            if (!consulta.isPaga()) {
                return false; // Se alguma consulta não está paga, não pode marcar nova
            }
        }
        return true; // Todas as consultas estão pagas
    }

}
